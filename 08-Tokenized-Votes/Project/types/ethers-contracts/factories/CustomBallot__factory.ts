/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BytesLike,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { CustomBallot, CustomBallotInterface } from "../CustomBallot";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "proposalNames",
        type: "bytes32[]",
      },
      {
        internalType: "address",
        name: "_voteToken",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "voter",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "proposal",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "weight",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "proposalVotes",
        type: "uint256",
      },
    ],
    name: "Voted",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "proposals",
    outputs: [
      {
        internalType: "bytes32",
        name: "name",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "voteCount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "referenceBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "spentVotePower",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposal",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "vote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "voteToken",
    outputs: [
      {
        internalType: "contract IERC20Votes",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "votingPower",
    outputs: [
      {
        internalType: "uint256",
        name: "votingPower_",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "winnerName",
    outputs: [
      {
        internalType: "bytes32",
        name: "winnerName_",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "winningProposal",
    outputs: [
      {
        internalType: "uint256",
        name: "winningProposal_",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000e7b38038062000e7b833981810160405281019062000037919062000213565b60005b8251811015620000f257600160405180604001604052808584815181106200008b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151815260200160008152509080600181540180825580915050600190039060005260206000209060020201600090919091909150600082015181600001556020820151816001015550508080620000e99062000343565b9150506200003a565b5080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555043600381905550505062000434565b60006200015a620001548462000296565b6200026d565b905080838252602082019050828560208602820111156200017a57600080fd5b60005b85811015620001ae5781620001938882620001fc565b8452602084019350602083019250506001810190506200017d565b5050509392505050565b600081519050620001c98162000400565b92915050565b600082601f830112620001e157600080fd5b8151620001f384826020860162000143565b91505092915050565b6000815190506200020d816200041a565b92915050565b600080604083850312156200022757600080fd5b600083015167ffffffffffffffff8111156200024257600080fd5b6200025085828601620001cf565b92505060206200026385828601620001b8565b9150509250929050565b6000620002796200028c565b90506200028782826200030d565b919050565b6000604051905090565b600067ffffffffffffffff821115620002b457620002b3620003c0565b5b602082029050602081019050919050565b6000620002d282620002e3565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6200031882620003ef565b810181811067ffffffffffffffff821117156200033a5762000339620003c0565b5b80604052505050565b6000620003508262000303565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141562000386576200038562000391565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b6200040b81620002c5565b81146200041757600080fd5b50565b6200042581620002d9565b81146200043157600080fd5b50565b610a3780620004446000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c806377174f851161005b57806377174f851461012a578063b384abef14610148578063d94c8caa14610164578063e2ba53f01461018257610088565b8063013cf08b1461008d578063160d66ae146100be57806346a38bc8146100dc578063609ff1bd1461010c575b600080fd5b6100a760048036038101906100a29190610654565b6101a0565b6040516100b5929190610785565b60405180910390f35b6100c66101d4565b6040516100d391906107ae565b60405180910390f35b6100f660048036038101906100f1919061062b565b6101fa565b60405161010391906107e9565b60405180910390f35b610114610212565b60405161012191906107e9565b60405180910390f35b6101326102e6565b60405161013f91906107e9565b60405180910390f35b610162600480360381019061015d91906106a6565b6103e5565b005b61016c61058c565b60405161017991906107e9565b60405180910390f35b61018a610592565b604051610197919061076a565b60405180910390f35b600181815481106101b057600080fd5b90600052602060002090600202016000915090508060000154908060010154905082565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006020528060005260406000206000915090505481565b6000806000905060005b6001805490508110156102e1578160018281548110610264577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600202016001015411156102ce57600181815481106102b6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600202016001015491508092505b80806102d990610932565b91505061021c565b505090565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633a46b1a8336003546040518363ffffffff1660e01b8152600401610386929190610741565b60206040518083038186803b15801561039e57600080fd5b505afa1580156103b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d6919061067d565b6103e09190610894565b905090565b60006103ef6102e6565b905081811015610434576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042b906107c9565b60405180910390fd5b816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610482919061083e565b9250508190555081600184815481106104c4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906002020160010160008282546104e4919061083e565b92505081905550823373ffffffffffffffffffffffffffffffffffffffff167fc32b42768a47a585121e9b8d7a2ab9d3f34c326a192dee11ee1732e3d18313f3846001878154811061055f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600202016001015460405161057f929190610804565b60405180910390a3505050565b60035481565b6000600161059e610212565b815481106105d5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906002020160000154905090565b6000813590506105fb816109d3565b92915050565b600081359050610610816109ea565b92915050565b600081519050610625816109ea565b92915050565b60006020828403121561063d57600080fd5b600061064b848285016105ec565b91505092915050565b60006020828403121561066657600080fd5b600061067484828501610601565b91505092915050565b60006020828403121561068f57600080fd5b600061069d84828501610616565b91505092915050565b600080604083850312156106b957600080fd5b60006106c785828601610601565b92505060206106d885828601610601565b9150509250929050565b6106eb816108c8565b82525050565b6106fa816108da565b82525050565b6107098161090e565b82525050565b600061071c601b8361082d565b9150610727826109aa565b602082019050919050565b61073b81610904565b82525050565b600060408201905061075660008301856106e2565b6107636020830184610732565b9392505050565b600060208201905061077f60008301846106f1565b92915050565b600060408201905061079a60008301856106f1565b6107a76020830184610732565b9392505050565b60006020820190506107c36000830184610700565b92915050565b600060208201905081810360008301526107e28161070f565b9050919050565b60006020820190506107fe6000830184610732565b92915050565b60006040820190506108196000830185610732565b6108266020830184610732565b9392505050565b600082825260208201905092915050565b600061084982610904565b915061085483610904565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156108895761088861097b565b5b828201905092915050565b600061089f82610904565b91506108aa83610904565b9250828210156108bd576108bc61097b565b5b828203905092915050565b60006108d3826108e4565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061091982610920565b9050919050565b600061092b826108e4565b9050919050565b600061093d82610904565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156109705761096f61097b565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f486173206e6f7420656e6f75676820766f74696e6720706f7765720000000000600082015250565b6109dc816108c8565b81146109e757600080fd5b50565b6109f381610904565b81146109fe57600080fd5b5056fea2646970667358221220a8991d33320e420253826b5ebab037f865d56596ca080e6f5aac814846cfb2e064736f6c63430008040033";

export class CustomBallot__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    proposalNames: BytesLike[],
    _voteToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<CustomBallot> {
    return super.deploy(
      proposalNames,
      _voteToken,
      overrides || {}
    ) as Promise<CustomBallot>;
  }
  getDeployTransaction(
    proposalNames: BytesLike[],
    _voteToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      proposalNames,
      _voteToken,
      overrides || {}
    );
  }
  attach(address: string): CustomBallot {
    return super.attach(address) as CustomBallot;
  }
  connect(signer: Signer): CustomBallot__factory {
    return super.connect(signer) as CustomBallot__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CustomBallotInterface {
    return new utils.Interface(_abi) as CustomBallotInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CustomBallot {
    return new Contract(address, _abi, signerOrProvider) as CustomBallot;
  }
}
